apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "com.github.dcendents:android-maven-gradle-plugin:1.4.1"
    }
}
repositories {
//    flatDir {
//        dirs 'libs'
//    }
    mavenCentral()
    jcenter()

}

group = 'com.taobao.android'
description = """atlas_core"""
version '5.0.6-rc19'


sourceCompatibility = 1.7
targetCompatibility = 1.7


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//
//    compile(name: 'dalvik_hack', version:'3.0.0.5',ext: 'aar')
//    compile(name: 'dalvikpatch', version:'1.0.0.4',ext: 'aar')
//
//    compile(name: 'android-art-interpret', version:'3.0.0.5',ext: 'aar')
}

tasks.whenTaskAdded {task ->

    if (task.name.startsWith("compile") && task.name.endsWith("JavaWithJavac")) {
        task.doLast {
            File instrumentation = new File(task.getDestinationDir(),
                                            "android/app/Instrumentation.class");
            if (instrumentation.exists()) {
                new File(task.getDestinationDir(), "android/app/Instrumentation.class").delete();
                println("delete instrumentation success!");
            }
            File preVerifier = new File(task.getDestinationDir(),"android/app/PreVerifier.class");
            if(preVerifier.exists()){
                new File(task.getDestinationDir(),"android/app/PreVerifier.class").delete();
                println("delete preVerifier success!");
            }
        }
    }
}



android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}
def siteUrl = 'https://github.com/alibaba/atlas'
// 项目的主页
def gitUrl = 'https://github.com/alibaba/atlas'
// Git仓库的url

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name 'atlas' //项目描述
                groupId 'com.taobao.android'
                artifactId 'atlas_core'
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'alibabaatlas' //填写的一些基本信息
                        name 'atlas-framework'
                        email 'alibabaatlasframework@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from('src/main/java') {
        include '**'
    }
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "atlas" //发布到JCenter上的项目名字
        websiteUrl = "https://github.com/alibaba/atlas"
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
